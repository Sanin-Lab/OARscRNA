[{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sanin-lab.github.io/OARscRNA/articles/Gene_expression.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Gene Expression Analysis based on OAR scores","text":"vignette explore genes associated increased OAR scores. use toy plasmacytoid dendritic cell dataset can download github repository.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/articles/Gene_expression.html","id":"calculating-oar-scores","dir":"Articles","previous_headings":"Overview","what":"1. Calculating OAR scores","title":"Gene Expression Analysis based on OAR scores","text":"can calculate OAR scores single line code. recommend follow introductory tutorials full description function. result Seurat object OARscore, KW.pvalue, KW.BH.pvalue pct.missing values meta.data slot. explore cells/clusters heterogeneity, can visualize results UMAP projection. Feature plot OAR score Notice cells High OAR score dataset cluster together.","code":"library(Seurat) #> Loading required package: SeuratObject #> Loading required package: sp #>  #> Attaching package: 'SeuratObject' #> The following objects are masked from 'package:base': #>  #>     intersect, t sc.data <- oar(data = readRDS(file = \"pdcs.rds\"),                 seurat_v5 = T, count.filter = 1,                blacklisted.genes = NULL, suffix = \"\",                cores = 1) #> Warning in oar(data = readRDS(file = \"pdcs.rds\"), seurat_v5 = T, count.filter = 1, : Running process in fewer than 2 cores will considerably slow down progress #> [1] \"Extracting data...\" #> [1] \"Extracting count tables\" #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:39:29 UTC\" #> [1] \"Identifying missing data patterns...\" ... library(Seurat) p1 <- FeaturePlot(   sc.data, features = \"OARscore\", order = T, pt.size = 0.5,    min.cutoff = \"q40\", max.cutoff = \"q90\") #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. p1"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/Gene_expression.html","id":"identify-genes-associated-with-oar-scores","dir":"Articles","previous_headings":"Overview","what":"2. Identify genes associated with OAR scores","title":"Gene Expression Analysis based on OAR scores","text":"typical scRNAseq analysis workflow, differential gene expression calculated based averaged counts across identified clusters. Although highly informative, approach fundamentally looses single cell resolution achieved technology. alternative using cluster labels model gene expression, invites biases associated identifying clusters, propose model gene expression based instead value OAR score. implement approach using glmGamPoi1, superior performance differential gene expression methods terms speed accuracy. Scaling factors calculated using scran::calculateSumFactors(), benefits parallel computing. brief explanation parameters presented : data may raw matrix counts fully processed Seurat object OAR score calculated, indicated seurat_v5 parameter. name score indicated score.name parameter. score needs provided starting count matrix vector OAR scores order columns count matrix. count.filter controls minimum percentage cells expressing given gene gene retained analysis. Defaults 1. blacklisted.genes, Allows provide vector uninformative gene names (.e. non-coding genes) exclude analysis. analysis automatically excludes ribosomal genes. Defaults NULL. splines degrees.freedom, control whether splines fit based OAR score (many, set degrees.freedom) capture non-linear associations scores gene expression. recommend setting splines TRUE degrees.freedom 3-5. splines set FALSE, monotonic/linear associations retrieved. auto.threshold custom.tr control false discovery rate (FDR) threshold consider gene significantly associated OAR score. auto.threshold set TRUE (recommended) estimates threshold based number cells tested. Typically, given high number observations, p values calculated based individual cells tend highly significant, even little association observed gene expression predictive variable. auto.threshold set FALSE, custom p value threshold provided custom.tr. Setting value typical ranges (.e. 0.05-0.01) likely result spurious associations. results analysis matrix regulated filtered genes: full description column, visit glmGamPoi documentation. purposes, name adj_pval columns (corresponding genes FDR, respectively) important results.","code":"oar_deg <- oar_deg(     data = sc.data, seurat_v5 = T, score.name = \"OARscore\",      score = NULL, count.filter = 1,     blacklisted.genes = NULL,     splines = TRUE, degrees.freedom = 5,     auto.threshold = TRUE, custom.tr = NULL) #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:39:36 UTC\" #> [1] \"Extracting count tables\" #> [1] \"FDR threshold set to:\" #> [1] 1e-20 #> Warning in oar_deg(data = sc.data, seurat_v5 = T, score.name = \"OARscore\", : Using splines increases calculation time by 3-5x #> [1] \"Analysis completed at:\" #> [1] \"2025-05-23 15:40:27 UTC\" oar_deg #>           name         pval     adj_pval f_statistic df1      df2 lfc #> 1        HSPB1 1.420100e-87 1.655695e-83    98.24009   5 1262.951  NA #> 2     PPP1R15A 1.884017e-67 1.098288e-63    73.25076   5 1262.951  NA #> 3      HLA-DRA 1.599269e-61 6.215294e-58    66.22267   5 1262.951  NA #> 4          UBC 1.854397e-60 5.405103e-57    64.97655   5 1262.951  NA #> 5     HLA-DRB1 5.356963e-60 1.249137e-56    64.43856   5 1262.951  NA #> 6     HSP90AB1 3.049325e-56 5.925347e-53    60.08569   5 1262.951  NA #> 7     HSP90AA1 1.649319e-50 2.747058e-47    53.54926   5 1262.951  NA #> 8     HLA-DPA1 5.614897e-50 8.183010e-47    52.94923   5 1262.951  NA #> 9          UBB 2.792879e-49 3.618020e-46    52.16515   5 1262.951  NA ..."},{"path":"https://sanin-lab.github.io/OARscRNA/articles/Gene_expression.html","id":"visualize-results","dir":"Articles","previous_headings":"Overview","what":"3. Visualize results","title":"Gene Expression Analysis based on OAR scores","text":"Overall, analysis identifies 135 genes significantly associated OAR scores. plot top 9 significant genes alongside previously calculated OAR scores, can observe identified several candidates analysis: Genes associated OAR score can see several features associated high OAR scoring cells (.e. PPP1R15A, HSPB1, EIF1, UBC, NMI, DNAJC7, PMAIP1, SAR1A) well one (B2M) associated low OAR scoring cells.","code":"library(Seurat) library(patchwork) library(ggplot2)  p1 <- FeaturePlot(   sc.data, features = \"OARscore\", order = T, pt.size = 0.5,    min.cutoff = \"q40\", max.cutoff = \"q90\") +    labs(title = \"OAR score\") +   theme(       aspect.ratio = 1,       legend.position = \"none\",       axis.title = element_blank(),       axis.text = element_blank(),       axis.ticks = element_blank(),       axis.line = element_blank(),       plot.title = element_text(size = 8, face = \"plain\"))  p2 <- FeaturePlot(   object = sc.data, pt.size = 0.1,   slot = \"counts\",   min.cutoff = \"q40\", max.cutoff = \"q90\",   features = oar_deg$name[1:9], combine = F)  p2 <- lapply(p2, function(x){   x +     theme(       aspect.ratio = 1,       axis.title = element_blank(),       axis.text = element_blank(),       axis.ticks = element_blank(),       axis.line = element_blank(),       plot.title = element_text(         size = 8, face = \"italic\")     ) +     NoLegend() })  p1|wrap_plots(p2, ncol = 3)"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/OAR_Factor.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Running OAR in a dataset split by Factors","text":"tutorial walk generating OAR scores single cell dataset separated factor data. begin Seurat object Dictyostelium discoideum cells (dicty) can download github repository. approach usually recommended multiple cell types dataset experimental conditions introduce dramatic shifts gene expression patterns. approach works best detect heterogeneity within set cells expect somewhat similar. Consequently, situations like ones outlined , makes sense split data factor running analysis. First, take look test performs data split. Later run analysis split factors. always, begin loading seurat object dataset interested .","code":"library(Seurat) #> Loading required package: SeuratObject #> Loading required package: sp #>  #> Attaching package: 'SeuratObject' #> The following objects are masked from 'package:base': #>  #>     intersect, t sc.data <- readRDS(file = \"dicty.rds\") sc.data #> An object of class Seurat  #> 13206 features across 5000 samples within 1 assay  #> Active assay: RNA (13206 features, 2000 variable features) #>  1 layer present: counts #>  1 dimensional reduction calculated: umap"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/OAR_Factor.html","id":"running-the-full-test","dir":"Articles","previous_headings":"Overview","what":"1. Running the full test","title":"Running OAR in a dataset split by Factors","text":"can run full test entire process single line. description parameters see vignettes. result Seurat object OARscore, KW.pvalue, KW.BH.pvalue pct.missing values meta.data slot. explore results can visualize OARscore vs pct.missing values, coloring cells based attributes Seurat object meta.data. Scatter Plots Factors can see underlying biological conditions resulting different sets OARscores. particular, 10h starvation, induces completely separate profile values. reason, running test separating data biological variable allow us prioritize cells within condition analysis.","code":"sc.data <- oar(data = sc.data,                 seurat_v5 = T, count.filter = 1,                blacklisted.genes = NULL, suffix = \"\",                store.hamming = F,                cores = 1) #> Warning in oar(data = sc.data, seurat_v5 = T, count.filter = 1, blacklisted.genes = NULL, : Running process in fewer than 2 cores will considerably slow down progress #> [1] \"Extracting data...\" #> [1] \"Extracting count tables\" #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:41:15 UTC\" #> [1] \"Identifying missing data patterns...\" ... library(patchwork) library(ggplot2) p1 <- scatter_score_missing(sc.data, pt.size = 0.5)+NoLegend() p2 <- scatter_score_missing(sc.data, pt.size = 0.5, group.by = \"group\") p1+p2"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/OAR_Factor.html","id":"analysis-by-factor","dir":"Articles","previous_headings":"Overview","what":"2. Analysis by Factor","title":"Running OAR in a dataset split by Factors","text":"OAR scores typically informative distinguishing among cells type. working dataset diverse cell types dramatically affected biological variable, can helpful split data factor run test independently. can easily accomplished wrapper function, takes parameters discussed returns Seurat object containing results analysis. Now let us examine outcome analysis: Scatter Plots Factors can see, able identify heterogeneity within biological condition. Moreover, can visualize results UMAP projection using Seurat::FeaturePlot(). Results factor","code":"sc.data <- oar_by_factor(sc.data, cores = 1, factor = \"group\", suffix = \".factor\") #> [1] \"Splitting data by specified factor...\" #> Warning in FUN(X[[i]], ...): Running process in fewer than 2 cores will considerably slow down progress #> [1] \"Extracting data...\" #> [1] \"Extracting count tables\" #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:41:32 UTC\" #> [1] \"Identifying missing data patterns...\" ... #> Warning in FUN(X[[i]], ...): Running process in fewer than 2 cores will considerably slow down progress #> [1] \"Extracting data...\" #> [1] \"Extracting count tables\" #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:41:41 UTC\" #> [1] \"Identifying missing data patterns...\" ... #> Warning in FUN(X[[i]], ...): Running process in fewer than 2 cores will considerably slow down progress #> [1] \"Extracting data...\" #> [1] \"Extracting count tables\" #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:41:45 UTC\" #> [1] \"Identifying missing data patterns...\" ... p3 <- scatter_score_missing(sc.data, pt.size = 0.5, suffix = \".factor\")+NoLegend() p4 <- scatter_score_missing(sc.data, pt.size = 0.5, group.by = \"group\", suffix = \".factor\") p3+p4 p5 <- FeaturePlot(   sc.data, features = \"OARscore.factor\", order = T, pt.size = 0.5,    min.cutoff = \"q40\", max.cutoff = \"q90\") #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. p5"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/detailed_tutorial.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Step-by-step guide to running OAR","text":"tutorial walk steps generating analyzing OAR scores single cell dataset. begin Seurat object plasmacytoid dendritic cells can download github repository. process starting gene expression matrix similar able adapt workflow input. Skip lines data pre-processing step run tutorial way. end, provide alternative single line wrapper function runs whole process, adds results meta.data slot Seurat object. starting dataset multiple cell types biological perturbation greatly alters gene expression, recommend running process splitting data factor, similarly provide wrapper function accomplishes .","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/articles/detailed_tutorial.html","id":"loading-and-pre-processing-your-data","dir":"Articles","previous_headings":"Overview","what":"1. Loading and pre-processing your data","title":"Step-by-step guide to running OAR","text":"First, load Seurat object wish examine store cell barcodes can later assign output. Now lets set count threshold analyze genes expressed least 1% cells1. recommend using thresholds higher 4%, information lost. Next, retrieve un-normalized count data Seurat object, filter low abundance genes remove genes uninformative2. output function list first element processed matrix second list genes matrix filtering. skip later tutorial. Missing values processed matrix gene counts denoted NA. full description parameter consult documentation. Briefly: seurat_v5 confirms type data used. Defaults TRUE. starting data matrix, set FALSE continue rest tutorial. tr controls minimum percentage cells expressing given gene gene retained analysis. Defaults 1. blacklisted.genes allows provide vector uninformative gene names (.e. non-coding genes) exclude analysis. Defaults NULL.","code":"sc.data <- readRDS(file = \"pdcs.rds\") cells = colnames(sc.data) sc.data #> An object of class Seurat  #> 14362 features across 1243 samples within 1 assay  #> Active assay: RNA (14362 features, 2000 variable features) #>  1 layer present: counts #>  2 dimensional reductions calculated: pca, umap tr = 1 oar_data <- oar_preprocess_data(   data = sc.data, tr = tr,    seurat_v5 = T, blacklisted.genes = NULL) #> [1] \"Extracting count tables\" oar_data[[1]][1:5,1:5] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   NA    1   NA    1   NA #> [2,]   NA   NA   NA   NA   NA #> [3,]   NA   NA    1   NA   NA #> [4,]   NA   NA   NA   NA   NA ..."},{"path":"https://sanin-lab.github.io/OARscRNA/articles/detailed_tutorial.html","id":"identifying-missing-data-patterns","dir":"Articles","previous_headings":"Overview","what":"2. Identifying Missing Data Patterns","title":"Step-by-step guide to running OAR","text":"scoring relies identifying co-expressed genes patterns (call missing data patterns) computationally intensive process. , can identify genes minimal mismatch , need first enable R run parallel. determine many thread available computer, can run parallelly::availableCores(). Leave least 1-2 cores available processes running computer prevent crashing. Using multiple cores recommended pattern identification go much faster. Now can select appropriate number set parallel processing R session. identify missing data patterns allowing mismatch, calculate hamming distance pairs gene expression vectors. Internally, gene vectors converted 0 (missing) 1 (observed) values. function needs number cores specified explicitly, slowest portion analysis. output list matrices hamming distance pair gene expression vectors evenly divided across expression bins calculated. Expression binning introduced increase computational performance introduce dynamic threshold identify patterns. wrapper function oar possibility storing result Seurat object, future score calculations completed faster. wrapper function automatically detects previously calculated hamming distance matrix uses analysis. WARNING: use different count filter value, different set cells, distances longer appropriate. case, remove previously calculated distance matrix using oar_obj[[\"RNA\"]]@misc <- list(). Next, want group genes co-expression patters based minimal hamming distance threshold. considerations pattern matching: Allowing exact matches results , often , co-expressed gene patterns, method makes process flexible. Internally, gene expression bin assigned separate minimal hamming distance threshold (minimum 0.01), used generate adjacency matrix genes. graph built based matrix eccentricities nodes calculated. minimal hamming distance threshold adjusted cap eccentricity nodes maintain pattern integrity. recommended plot KW.BH.pvalue vs. pct.missing examine results. obverve relationship variables, higher p values - - cells high pct.missing. can visualize results pattern search using: Missing Data Pattern Plot slice bar represents cell, colored based percentage genes pattern expressed cell.","code":"parallelly::availableCores() #> system  #>      2 dm <- oar_hamming_distance(   oar_data[[1]], cores = 1) #> [1] \"Calculating Hamming distances between gene vectors using specified cores.\" #> [1] \"This operation may take several minutes\" #> OpenMP reports: max_threads = 1, num_procs = 2, actual used = 1 #> OpenMP reports: max_threads = 1, num_procs = 2, actual used = 1 #> OpenMP reports: max_threads = 1, num_procs = 2, actual used = 1 ... dm[[1]][1:5,1:5] #>            1          2          3          4          5 #> 1 0.00000000 0.02976669 0.02976669 0.02815768 0.02976669 #> 2 0.02976669 0.00000000 0.03218021 0.02896219 0.03378922 #> 3 0.02976669 0.03218021 0.00000000 0.02735318 0.03218021 #> 4 0.02815768 0.02896219 0.02735318 0.00000000 0.02896219 ... mdp <- oar_missing_data_patterns(oar_data[[1]], dm) #> [1] \"Identified 24 non-unique missing data patterns\" #> [1] \"A total of 331 genes captured in non-unique patterns\" table(mdp) #> mdp #>  ptn.1 ptn.10 ptn.11 ptn.12 ptn.13 ptn.14 ptn.15 ptn.16 ptn.17 ptn.18 ptn.19  #>    108      2     30      2      3      4      2      3      4      3      5  #>  ptn.2 ptn.20 ptn.21 ptn.22 ptn.23 ptn.24  ptn.3  ptn.4  ptn.5  ptn.6  ptn.7  #>     12      2      2      5      2      2     39     21     31      2      2  ... p3 <- oar_missing_data_plot(data = oar_data[[1]], mdp = mdp, seurat_v5 = FALSE) #> [1] \"Generating plots...\" p3"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/detailed_tutorial.html","id":"calculate-oar-scores","dir":"Articles","previous_headings":"Overview","what":"3. Calculate OAR scores","title":"Step-by-step guide to running OAR","text":"Now ready cell-wise estimation overlap gene expression distributions detected pattern. distributions distinct, find data missing random (NOAR), highly significant p values OAR score less 2. Alternatively, distributions overlap, gene expression appears randomly distributed (OAR), cells larger p value OAR score greater 2. Critically, test incorporates gene expression values missing data patterns. result matrix columns: OARscore metric heterogeneity data, higher OAR score highlighting cells gene expression patterns dissimilar others tested. KW.pvalue p-value generated Kruskal-Wallis test. KW.BH.pvalue Benjamini-Hochberg corrected p-value. pct.missing percent missing genes cell fraction genes expressed cells dataset. can now proceed visualize results identify cells heterogeneous.","code":"output <- oar_base(data = oar_data[[1]], mdp = mdp) output$barcodes = cells #add back our barcodes output #>           OARscore    KW.pvalue KW.BH.pvalue pct.missing             barcodes #> 1     0.4991194964 1.310249e-74 1.672114e-74    79.46352 AAACCTGAGAACAATC-1_1 #> 2    -0.5335102274 9.891672e-83 3.595131e-82    87.92927 AAACCTGAGGTGCTAG-1_1 #> 3    -1.0294046721 7.161214e-87 7.474225e-86    85.27251 AAACCTGGTAGCAAAT-1_1 #> 4    -1.3317223078 2.258655e-89 4.253800e-88    78.79720 AAACGGGGTACCCAAT-1_1 ..."},{"path":"https://sanin-lab.github.io/OARscRNA/articles/detailed_tutorial.html","id":"visualize-results","dir":"Articles","previous_headings":"Overview","what":"4. Visualize results","title":"Step-by-step guide to running OAR","text":"higher OAR score way prioritize cells analysis. Greater scores indicate distinct cell expression signatures, high scoring cells different gene co-expression patterns compared cells test. example, observe cells high degree sparsity, also high OAR score Scatter Plots may recreate plot using scatter_score_missing(). order fully understand features dataset driving high OAR score cells, necessary annotate biological context. easily achieved within Seurat object additional experimental details.","code":"library(ggplot2) p1 <-ggplot(   data = output,   aes(x = pct.missing,       y = OARscore,        color = -log10(KW.BH.pvalue))) +    geom_point(size = 0.5) +    labs(     x = \"% Missing Data\",     y = \"OAR score\") +   geom_hline(     yintercept = 2, linetype = \"dashed\",      color = \"black\", linewidth = 0.25) +   scale_colour_gradientn(     colours = (c(\"#000004FF\",\"#3B0F70FF\",\"#8C2981FF\",                     \"#DE4968FF\", \"#FE9F6DFF\",\"#FCFDBFFF\")),     na.value = \"transparent\",      name = expression(-Log[10]~BH.pval),     guide = guide_colorbar(       frame.colour = \"black\",       frame.linewidth = 0.2,       ticks.linewidth = 0.2,       ticks.colour = \"black\")) +   theme(     aspect.ratio = 1,     panel.grid = element_blank(),     panel.background = element_blank(),     axis.line = element_line(linewidth = 0.5),     legend.text = element_text(size = 6),      legend.title = element_text(size = 8),     legend.key.size = unit(3, \"mm\"),     axis.text = element_text(size = 6),      axis.title = element_text(size = 8),     plot.title = element_blank()) p1"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/detailed_tutorial.html","id":"wrapper-functions-and-result-interpretation","dir":"Articles","previous_headings":"Overview","what":"5. Wrapper functions and result interpretation","title":"Step-by-step guide to running OAR","text":"can run entire process single line. result Seurat object OARscore, KW.pvalue, KW.BH.pvalue pct.missing values meta.data slot. Additionally, genes annotated missing data patterns (mdp) included sc.data@assays$RNA@meta.data. set parameters based earlier discussion: seurat_v5 confirms type data used. Defaults TRUE. count.filter controls minimum percentage cells expressing given gene gene retained analysis. Defaults 1. blacklisted.genes Allows provide vector uninformative gene names (.e. non-conding genes) exclude analysis. Defaults NULL. suffix Allows provide character string avoid overwriting previous OAR calculations. Defaults NULL. store.hamming allows store calculated hamming distances pattern matching Seurat object faster re-calculation scores need alter parameters later (found oar_obj[[\"RNA\"]]@misc). Defaults TRUE. can use similar approach analyse data cluster cluster - recommended multiple cell types - separated another variable data. case, use oar_by_factor() see vignette(\"OAR_Factor\") details.","code":"sc.data <- oar(data = sc.data,                 seurat_v5 = T, count.filter = 1,                blacklisted.genes = NULL, suffix = \"\",                store.hamming = T,                cores = 1)"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/detailed_tutorial.html","id":"interpreting-high-oar-scores","dir":"Articles","previous_headings":"Overview > 5. Wrapper functions and result interpretation","what":"Interpreting high OAR scores","title":"Step-by-step guide to running OAR","text":"explore cells/clusters heterogeneity, can project scores UMAP using Seurat::FeaturePlot(). Notice cells high OAR score dataset cluster together. fact, case, high OAR scoring cells represent activated cells experiment, can seen examine IFNA1, expressed activated plasmacytoid dendritic cells. Feature plot OAR score Thus, dataset able identify highly activated cells cluster agnostic approach. provide additional tutorials identify genes associated high OAR score (see: vignette(\"Gene_expression\")). also seen datasets high scores associated biological variation may removed analysis glean additional insights populations cells studied. can achieved passing OARscore vars..regress Seurat::SCTransform().","code":"library(Seurat) #> Loading required package: SeuratObject #> Loading required package: sp #>  #> Attaching package: 'SeuratObject' #> The following objects are masked from 'package:base': #>  #>     intersect, t p1 <- FeaturePlot(   sc.data, features = c(\"OARscore\",\"IFNA1\"), order = T, pt.size = 0.5,    min.cutoff = \"q40\", max.cutoff = \"q90\", slot = \"counts\") #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The following requested variables were not found: OARscore p1"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introductory Vignette for OARscRNA","text":"vignette walk basic steps generating analyzing OAR scores single cell dataset. two possible starting points: Seurat v5 Object Gene Expression Matrix walk steps analysis, beginning gene expression matrix plasmacytoid dendritic cell dataset can download github repository.","code":""},{"path":[]},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"analysis","dir":"Articles","previous_headings":"Overview > Starting from v5 Seurat Object","what":"Analysis","title":"Introductory Vignette for OARscRNA","text":"can directly input Seurat object examine heterogeneity. seurat version 5 object loaded, can run oar function. function requires input data, well information number cores (set 1 DEFAULT). determine many threads available analysis, can run parallelly::availableCores(). Leave least 1-2 cores available processes running computer prevent crashing. Using multiple cores recommended pattern identification go much faster. deliberately left parameters defaults, however recommend explore familiarize impact result. critical parameters consider include: seurat_v5 confirms type data used. Defaults TRUE. count.filter controls minimum percentage cells expressing given gene gene retained analysis. Defaults 1. blacklisted.genes allows provide vector uninformative gene names (.e. non-coding genes) exclude analysis. Defaults NULL. store.hamming allows store calculated hamming distances pattern matching Seurat object faster re-calculation scores need alter parameters later (found oar_obj[[\"RNA\"]]@misc). Defaults TRUE. result Seurat object additional metadata columns: OARscore metric heterogeneity data, higher OAR score highlighting cells gene expression patterns dissimilar others tested. KW.pvalue p-value generated Kruskal-Wallis test. KW.BH.pvalue Benjamini-Hochberg corrected p-value. pct.missing percent missing genes cell fraction genes expressed cells dataset. Additionally, genes annotated missing data patterns (mdp) included . mdp matrix added assay metadata (found oar_obj@assays$RNA@meta.data).","code":"data_obj <- readRDS(file = \"pdcs.rds\") data_obj #> An object of class Seurat  #> 14362 features across 1243 samples within 1 assay  #> Active assay: RNA (14362 features, 2000 variable features) #>  1 layer present: counts #>  2 dimensional reductions calculated: pca, umap oar_obj <- oar(data_obj, cores = 1) #> Warning in oar(data_obj, cores = 1): Running process in fewer than 2 cores will considerably slow down progress #> [1] \"Extracting data...\" #> [1] \"Extracting count tables\" #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:40:46 UTC\" #> [1] \"Identifying missing data patterns...\" ..."},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"analysis-by-factor","dir":"Articles","previous_headings":"Overview > Starting from v5 Seurat Object","what":"Analysis by Factor","title":"Introductory Vignette for OARscRNA","text":"OAR scores typically informative distinguishing among cells type. working dataset diverse cell types dramatically affected biological variable, can helpful split data factor run test independently. See vignette(\"OAR_Factors\") details. functions takes parameters oar, store calculated hamming distances resulting Seurat object.","code":"oar_obj_byfactor <- oar_by_factor(data_obj, cores = 1, factor = \"ident\")"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"visualize-results","dir":"Articles","previous_headings":"Overview > Starting from v5 Seurat Object","what":"Visualize Results","title":"Introductory Vignette for OARscRNA","text":"examples might explore results analysis.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"oarscore-v-percent-missing-scatter-plot","dir":"Articles","previous_headings":"Overview > Starting from v5 Seurat Object > Visualize Results","what":"OARscore v Percent Missing Scatter Plot","title":"Introductory Vignette for OARscRNA","text":"Scatter Plots plot reveals clusters highest OAR scores, well score relates percent missing genes. Adjust group.metric examine variables.","code":"library(patchwork) library(ggplot2) p1 <- scatter_score_missing(oar_obj, pt.size = 0.5)+theme(legend.position = \"none\") p2 <- scatter_score_missing(oar_obj, pt.size = 0.5, group.by = \"condition\")+theme(legend.position = \"none\") p1+p2"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"missing-data-patterns","dir":"Articles","previous_headings":"Overview > Starting from v5 Seurat Object > Visualize Results","what":"Missing Data Patterns","title":"Introductory Vignette for OARscRNA","text":"cases, might want explore patterns identified analysis understand co-expression gene modules telling . First, can visualize missing data patterns like : Missing Data Pattern Plot dataset, identified 24 sets genes. slice bar represents cell, colored based percentage genes pattern expressed cell. get data.frame genes within pattern, use: also possible retrieve missing data patterns oar_by_factor() applied. Please see documentation get_missing_pattern_genes() details. Currently, oar_missing_data_plot() supported oar_by_factor() executed.","code":"p3 <- oar_missing_data_plot(oar_obj) #> [1] \"Extracting count tables\" #> [1] \"Generating plots...\" p3 mdp <- get_missing_pattern_genes(oar_obj)"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"score-projection-with-seurat-featureplot","dir":"Articles","previous_headings":"Overview > Starting from v5 Seurat Object > Visualize Results","what":"Score projection with Seurat FeaturePlot","title":"Introductory Vignette for OARscRNA","text":"scores, p values sparsity added columns meta.data Seurat object, can use native functions package visualize results. Seurat::FeaturePlot() particular, good starting point get overview score distributed among cells clusters. Feature plot results","code":"library(Seurat) #> Loading required package: SeuratObject #> Loading required package: sp #>  #> Attaching package: 'SeuratObject' #> The following objects are masked from 'package:base': #>  #>     intersect, t p4 <- FeaturePlot(   oar_obj, features = \"OARscore\", order = T, pt.size = 0.5,    min.cutoff = \"q40\", max.cutoff = \"q90\") #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. p4"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"starting-from-a-gene-expression-matrix","dir":"Articles","previous_headings":"Overview","what":"Starting from a Gene Expression Matrix","title":"Introductory Vignette for OARscRNA","text":"steps analyse gene count matrix, cells columns genes rows, similar saw .","code":"data <- readRDS(file = \"pdcs_matrix.rds\")"},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"analysis-1","dir":"Articles","previous_headings":"Overview > Starting from a Gene Expression Matrix","what":"Analysis","title":"Introductory Vignette for OARscRNA","text":"data loaded, can run oar function. addition input data must specify starting Seurat object setting seurat_v5 FALSE. results table following columns: OARscore metric heterogeneity data, higher OAR score highlighting cells gene expression patterns dissimilar others tested. KW.pvalue p-value generated Kruskal-Wallis test. KW.BH.pvalue Benjamini-Hochberg corrected p-value. pct.missing percent missing genes cell fraction genes expressed cells dataset.","code":"oar_data<- oar(data, seurat_v5 = FALSE,                cores = 1) #> Warning in oar(data, seurat_v5 = FALSE, cores = 1): Running process in fewer than 2 cores will considerably slow down progress #> [1] \"Extracting data...\" #> [1] \"Analysis started on:\" #> [1] \"2025-05-23 15:40:59 UTC\" #> [1] \"Identifying missing data patterns...\" #> [1] \"Calculating Hamming distances between gene vectors using specified cores.\" ... oar_data #>           OARscore    KW.pvalue KW.BH.pvalue pct.missing #> 1     0.4991194964 1.310249e-74 1.672114e-74    79.46352 #> 2    -0.5335102274 9.891672e-83 3.595131e-82    87.92927 #> 3    -1.0294046721 7.161214e-87 7.474225e-86    85.27251 #> 4    -1.3317223078 2.258655e-89 4.253800e-88    78.79720 ..."},{"path":"https://sanin-lab.github.io/OARscRNA/articles/introductory_vignette.html","id":"visualize-results-1","dir":"Articles","previous_headings":"Overview > Starting from a Gene Expression Matrix","what":"Visualize Results","title":"Introductory Vignette for OARscRNA","text":"can visualize OAR scores scatter plot percent missing genes. Scatter plot results","code":"p5 <- scatter_score_missing(oar_data, seurat_v5 = F) p5"},{"path":"https://sanin-lab.github.io/OARscRNA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Sanin. Author, maintainer. Ruizhe Chen. Author. Hannah Moore. Author. Dmitrijs Lvovs. Author. Paul Gueguen. Author.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanin D, Chen R, Moore H, Lvovs D, Gueguen P (2025). OAR: Heterogeneity Scoring scRNA Sequencing Data Based Missingness. R package version 1.0.0, https://github.com/Sanin-Lab/OARscRNA.","code":"@Manual{,   title = {OAR: Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness},   author = {David Sanin and Ruizhe Chen and Hannah Moore and Dmitrijs Lvovs and Paul Gueguen},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/Sanin-Lab/OARscRNA}, }"},{"path":[]},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"heterogeneity-scoring-on-scrnaseq-data-based-on-missingness","dir":"","previous_headings":"","what":"Heterogeneity scoring on scRNAseq data based on missingness","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"OAR (observed random) score reveals cellular heterogeneity, allowing cell prioritization downstream applications. best results, apply test group similar cells expect heterogeneity - .e. one cell type across various biological samples conditions. OAR scores cluster agnostic (cluster labels required) robust across: Technologies Technical batches/library preparations Organisms OAR score measure heterogeneity among cells. cell positive OAR score one set genes appears expressed homogeneously cells tested, consequently highly distinct cell.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"scRNAseq data sparse (50-90% expression values 0). Sparsity generally attributed technical limitations associated capturing RNA molecules individual cells. 0s expected, consequence Gamma-Poisson distribution count data1, whereas “Drop-” (0s occur positive counts expected) problem associated specific technologies (UMI- vs. nonUMI-based)2. Sparsity used : Cluster cells Define variable genes something else can learn cellular identity sparsity scRNAseq data? sparsity (~missingness) occurring completely random?","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"test-overview","dir":"","previous_headings":"","what":"Test overview","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"core OAR score identification missing data patterns, followed comparing distribution genes expressed identified patterns cell individually. calculate OAR score : Estimate Hamming distances binarized vectors gene expression. Group genes across missing data patterns based hamming distances . Genes unique patterns - .e. “neighbors”, grouped together. Compare distribution gene expression across identified patterns cell Kruskal-Wallis test. Scale resulting corrected p value distributions across cells obtain OAR score.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"install latest version package, run: devtools::install_github(\"Sanin-Lab/OARscRNA\") want install vignettes (takes minutes!), try: devtools::install_github(\"Sanin-Lab/OARscRNA\", build_vignettes = TRUE) Mac Linux users: package uses FastHamming::hamming_distance() speed hamming distance calculation. Unless OpenMP installed computer, function default use available threads. install via Homebrew run terminal: brew install libomp","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"calculate OAR score Seurat object default parameters run: oar(data = seurat.obj) matrix unnormalized read counts, run: oar(data = read.counts, seurat_v5 = F) automatically filter genes low expression, identify suitable tolerance hamming distance, return OAR score, corrected uncorrected p values percentage missing data cell (column) supplied object. Seurat object supplied, results added columns meta.data slot. full details parameters, including step--step breakdown process, please visit documentation view vignettes browseVignettes(package = \"OAR\").","code":""},{"path":[]},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"quick-overview","dir":"","previous_headings":"Tutorials and Applications","what":"Quick overview","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"Follow quick guide running analysis single line: vignette(\"introductory_vignette\")","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"cell-prioritization-for-downstream-analysis","dir":"","previous_headings":"Tutorials and Applications","what":"Cell prioritization for downstream analysis","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"Follow step--step tutorial exploring can identify highly activated plasmacytoid dendritic cells based high OAR score: vignette(\"detailed_tutorial\")","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"cell-prioritization-across-biological-conditions","dir":"","previous_headings":"Tutorials and Applications","what":"Cell prioritization across biological conditions","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"OAR scores typically informative distinguishing among cells type. working dataset diverse cell types dramatically affected biological variable, can helpful split data factor run test independently: vignette(\"OAR_Factor\")","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"model-gene-expression-data-at-the-single-cell-level","dir":"","previous_headings":"Tutorials and Applications","what":"Model gene expression data at the single cell level","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"Identify genes responsible high OAR scoring cells single cell resolution: vignette(\"Gene_expression\")","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"remove-sources-of-variation-from-scrnaseq-data-analysis","dir":"","previous_headings":"Tutorials and Applications","what":"Remove sources of variation from scRNAseq data analysis","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"Regress OAR scores calculated raw counts found associated unwanted sources variation (batches, low quality cells, individual samples) remove confounding factors.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness","text":"scRNAseq implementation: Chen, R., Moore, H., Gueguen, PM., Kelly, B., Fertig, EJ., Sanin, DE., (2025). Scoring Cellular Heterogeneity interrogating Missingness single-cell RNA-seq Data. press Statistical proof: Chen, R., Chung, YC., Basu, S., Shi, Q., (2024). Diagnostic Test Realized Missingness Mixed-type Data. Sankhya B, 86(1), 109-138. DOI: 10.1007/s13571-023-00317-5 Copyright 2025 - Johns Hopkins University","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/OAR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"OAR: Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness — OAR-package","title":"OAR: Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness — OAR-package","text":"OAR (observed random) score measure heterogeneity among cells, allowing cell prioritization downstream applications. best results, test group similar cells expect heterogeneity - .e. one cell type across various biological samples conditions.","code":""},{"path":[]},{"path":"https://sanin-lab.github.io/OARscRNA/reference/OAR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"OAR: Heterogeneity Scoring on scRNA Sequencing Data Based on Missingness — OAR-package","text":"Maintainer: David Sanin david.sanin@jhu.edu (ORCID) Authors: Ruizhe Chen rzchen@jhu.edu (ORCID) Hannah Moore hmoore14@jhmi.edu (ORCID) Dmitrijs Lvovs dlvovs1@jh.edu (ORCID) Paul Gueguen paul.gueguen@fgcz.ethz.ch (ORCID)","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/get_missing_pattern_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create list of which genes participate in each pattern. — get_missing_pattern_genes","title":"Create list of which genes participate in each pattern. — get_missing_pattern_genes","text":"Create list genes participate pattern.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/get_missing_pattern_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create list of which genes participate in each pattern. — get_missing_pattern_genes","text":"","code":"get_missing_pattern_genes(data)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/get_missing_pattern_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create list of which genes participate in each pattern. — get_missing_pattern_genes","text":"data Seurat object oar() oar_by_cluster() run previously.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/get_missing_pattern_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create list of which genes participate in each pattern. — get_missing_pattern_genes","text":"data.frame genes annotated missing data pattern participate (globally cluster).","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/get_missing_pattern_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create list of which genes participate in each pattern. — get_missing_pattern_genes","text":"","code":"if (FALSE) { # \\dontrun{ mdp <- get_missing_pattern_genes(data) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/missing_pattern_pval_kw.html","id":null,"dir":"Reference","previous_headings":"","what":"Kruskal-Wallis test to generate a per cell p-value based on missing data patterns — missing_pattern_pval_kw","title":"Kruskal-Wallis test to generate a per cell p-value based on missing data patterns — missing_pattern_pval_kw","text":"Kruskal-Wallis test generate per cell p-value based missing data patterns","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/missing_pattern_pval_kw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kruskal-Wallis test to generate a per cell p-value based on missing data patterns — missing_pattern_pval_kw","text":"","code":"missing_pattern_pval_kw(x, mdp)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/missing_pattern_pval_kw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kruskal-Wallis test to generate a per cell p-value based on missing data patterns — missing_pattern_pval_kw","text":"x Item list cell gene expression vectors mdp Matrix gene participation per pattern","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/missing_pattern_pval_kw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kruskal-Wallis test to generate a per cell p-value based on missing data patterns — missing_pattern_pval_kw","text":"list p-value cell","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/missing_pattern_pval_kw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kruskal-Wallis test to generate a per cell p-value based on missing data patterns — missing_pattern_pval_kw","text":"","code":"if (FALSE) { # \\dontrun{ pvalue <- missing_pattern_pval_kw(x, mdp) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar.html","id":null,"dir":"Reference","previous_headings":"","what":"Single line pipeline to run complete analysis — oar","title":"Single line pipeline to run complete analysis — oar","text":"Single line pipeline run complete analysis","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single line pipeline to run complete analysis — oar","text":"","code":"oar(   data,   seurat_v5 = TRUE,   count.filter = 1,   blacklisted.genes = NULL,   suffix = \"\",   cores = 1,   store.hamming = TRUE )"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single line pipeline to run complete analysis — oar","text":"data Seurat (v5) object matrix cell barcodes column names genes row names. seurat_v5 boolean indicate supplied data Seurat object, default TRUE count.filter numeric value indicating minimum fraction cells expressing given gene included analysis, default 1. Values 0.5 2 recommended. blacklisted.genes character vector gene names excluded analysis. Default empty. suffix string append output variables. Default empty cores numeric value indicating number cores use un parallel processing. Use parallel::detectCores() parallelly::availableCores() identify possibilities. Default 1. store.hamming boolean control hamming distances stored Seurat object. Default set TRUE","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single line pipeline to run complete analysis — oar","text":"Seurat object OAR stats added meta data, matrix OAR stats.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single line pipeline to run complete analysis — oar","text":"","code":"if (FALSE) { # \\dontrun{ pbmcs <- oar(pbmcs) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate scores and p-values to determine heterogeneity of data by looking at whether missingness is observed-at-random (OAR) — oar_base","title":"Generate scores and p-values to determine heterogeneity of data by looking at whether missingness is observed-at-random (OAR) — oar_base","text":"Generate scores p-values determine heterogeneity data looking whether missingness observed--random (OAR)","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate scores and p-values to determine heterogeneity of data by looking at whether missingness is observed-at-random (OAR) — oar_base","text":"","code":"oar_base(data, mdp)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate scores and p-values to determine heterogeneity of data by looking at whether missingness is observed-at-random (OAR) — oar_base","text":"data gene-cell expression matrix NA values place 0s. mdp vector indicating pattern gene belongs.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate scores and p-values to determine heterogeneity of data by looking at whether missingness is observed-at-random (OAR) — oar_base","text":"Data frame OAR-score, p-value, adjusted p-value, percent missing data cell.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate scores and p-values to determine heterogeneity of data by looking at whether missingness is observed-at-random (OAR) — oar_base","text":"","code":"if (FALSE) { # \\dontrun{ output <- oar_base(data, mdp) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_by_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate OAR score within each cluster and add them to full objects metadata — oar_by_factor","title":"Generate OAR score within each cluster and add them to full objects metadata — oar_by_factor","text":"Generate OAR score within cluster add full objects metadata","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_by_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate OAR score within each cluster and add them to full objects metadata — oar_by_factor","text":"","code":"oar_by_factor(   data,   count.filter = 1,   blacklisted.genes = NULL,   suffix = \"\",   factor = \"ident\",   cores = 1 )"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_by_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate OAR score within each cluster and add them to full objects metadata — oar_by_factor","text":"data Seurat (v5) object. count.filter numeric value indicating minimum fraction cells expressing given gene included analysis, default 1. Values 0.5 2 recommended. blacklisted.genes character vector gene names excluded analysis. Default empty. suffix string append output variables. Default empty factor  character string mapping column meta.data. Defaults ident. cores numeric value indicating number cores use un parallel processing. Use parallel::detectCores() parallelly::availableCores() identify possibilities.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_by_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate OAR score within each cluster and add them to full objects metadata — oar_by_factor","text":"Seurat object OAR stats added meta data","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_by_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate OAR score within each cluster and add them to full objects metadata — oar_by_factor","text":"","code":"if (FALSE) { # \\dontrun{ pmbcs <- oar_by_cluster(pmbcs) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_deg.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate DEGs based on OAR score — oar_deg","title":"Generate DEGs based on OAR score — oar_deg","text":"Generate DEGs based OAR score","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_deg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate DEGs based on OAR score — oar_deg","text":"","code":"oar_deg(   data,   seurat_v5 = T,   score = NULL,   count.filter = 1,   splines = TRUE,   degrees.freedom = 5,   blacklisted.genes = NULL,   auto.threshold = TRUE,   custom.tr = NULL,   score.name = \"OARscore\" )"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_deg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate DEGs based on OAR score — oar_deg","text":"data Seurat (v5) object data.frame cell barcodes column names genes row names. Seurat object must column metadata OARscore. seurat_v5 boolean indicate supplied data Seurat object, default TRUE. FALSE, user must supply score vector. score named numeric vector OARscores used model. Names cell barcodes. Ignored Seurat object supplied. count.filter numeric value indicating minimum fraction cells expressing given gene included analysis, default 1. Values 0.5 2 recommended. splines boolean indicate splines used fit model, default TRUE degrees.freedom numeric value indicating degrees freedom calculate splines. Default 5. Values 3 5 recommended. blacklisted.genes character vector gene names excluded analysis. Default empty. auto.threshold boolean indicate FDR threshold calculated data, default TRUE custom.tr numeric value use FDR threshold. Ignored auto.threshold set TRUE. score.name name OAR score dataset, default \"OARscore\". suffix used previous functions, need include full new name .","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_deg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate DEGs based on OAR score — oar_deg","text":"data.frame p-values genes significantly contribute OAR score.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_deg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate DEGs based on OAR score — oar_deg","text":"","code":"if (FALSE) { # \\dontrun{ degs <- oar_deg(data) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_hamming_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate hamming distances between genes — oar_hamming_distance","title":"Calculate hamming distances between genes — oar_hamming_distance","text":"Calculate hamming distances genes","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_hamming_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate hamming distances between genes — oar_hamming_distance","text":"","code":"oar_hamming_distance(data, cores = 1)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_hamming_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate hamming distances between genes — oar_hamming_distance","text":"data minimal dataset ready processing. cores numeric value indicating number cores use un parallel processing. Use parallel::detectCores() parallelly::availableCores() identify possibilities.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_hamming_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate hamming distances between genes — oar_hamming_distance","text":"list matrices hamming distances across gene bins","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_hamming_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate hamming distances between genes — oar_hamming_distance","text":"","code":"if (FALSE) { # \\dontrun{ ##Automatic tolerance setting dm <- oar_hamming_distance(data, cores = 2)  } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Group missing data patterns based on tolerance with a graph — oar_missing_data_graph","title":"Group missing data patterns based on tolerance with a graph — oar_missing_data_graph","text":"Group missing data patterns based tolerance graph","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group missing data patterns based on tolerance with a graph — oar_missing_data_graph","text":"","code":"oar_missing_data_graph(dm, tol = 0.01)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group missing data patterns based on tolerance with a graph — oar_missing_data_graph","text":"dm matrix gene vector hamming distances. tol numeric value indicating maximum fraction mismatch genes group pattern, default 0.05.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group missing data patterns based on tolerance with a graph — oar_missing_data_graph","text":"missing data pattern vector","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group missing data patterns based on tolerance with a graph — oar_missing_data_graph","text":"","code":"if (FALSE) { # \\dontrun{ mdp <- oar_missing_data_patterns(dm, tol = 0.01) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify missing data patterns allowing for mismatch — oar_missing_data_patterns","title":"Identify missing data patterns allowing for mismatch — oar_missing_data_patterns","text":"Identify missing data patterns allowing mismatch","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify missing data patterns allowing for mismatch — oar_missing_data_patterns","text":"","code":"oar_missing_data_patterns(data, dm)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify missing data patterns allowing for mismatch — oar_missing_data_patterns","text":"data minimal dataset ready processing. dm matrix hamming distances gene vectors.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify missing data patterns allowing for mismatch — oar_missing_data_patterns","text":"Vector missing data patterns","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify missing data patterns allowing for mismatch — oar_missing_data_patterns","text":"","code":"if (FALSE) { # \\dontrun{ mdp <- oar_missing_data_patterns(data, dm) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot identified missing data patterns — oar_missing_data_plot","title":"Plot identified missing data patterns — oar_missing_data_plot","text":"Plot identified missing data patterns","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot identified missing data patterns — oar_missing_data_plot","text":"","code":"oar_missing_data_plot(data, mdp = NULL, seurat_v5 = TRUE)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot identified missing data patterns — oar_missing_data_plot","text":"data gene-cell expression matrix NA values place 0s 1s everywhere else Seurat Object oar applied . mdp vector indicating pattern gene belongs. Default NULL. seurat_v5 boolean indicate input data Seurat object. Default TRUE.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot identified missing data patterns — oar_missing_data_plot","text":"Plot missing data patterns.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_missing_data_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot identified missing data patterns — oar_missing_data_plot","text":"","code":"if (FALSE) { # \\dontrun{ ##Starting from a Seurat Object analysed jointly output <- oar_missing_data_plot(data, seurat_v5 = TRUE)  ##Starting from filtered and binarized expression matrix output <- oar_missing_data_plot(data, mdp, seurat_v5 = FALSE) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_preprocess_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for oar fold functions — oar_preprocess_data","title":"Prepare data for oar fold functions — oar_preprocess_data","text":"Prepare data oar fold functions","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_preprocess_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for oar fold functions — oar_preprocess_data","text":"","code":"oar_preprocess_data(data, tr = 1, seurat_v5 = TRUE, blacklisted.genes = NULL)"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_preprocess_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for oar fold functions — oar_preprocess_data","text":"data seurat object gene expression matrix tr filtering threshold. Default 1. seurat_v5 boolean indicate supplied data Seurat object, default TRUE blacklisted.genes character vector gene names excluded analysis. Default empty.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_preprocess_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for oar fold functions — oar_preprocess_data","text":"Data matrix blacklisted genes removed","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/oar_preprocess_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for oar fold functions — oar_preprocess_data","text":"","code":"if (FALSE) { # \\dontrun{ data <- oar_preprocess_data(data) } # }"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/scatter_score_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Create scatter plot of OAR score vs percent missing — scatter_score_missing","title":"Create scatter plot of OAR score vs percent missing — scatter_score_missing","text":"Create scatter plot OAR score vs percent missing","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/scatter_score_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create scatter plot of OAR score vs percent missing — scatter_score_missing","text":"","code":"scatter_score_missing(   data,   group.by = \"seurat_clusters\",   seurat_v5 = TRUE,   suffix = \"\",   pt.size = 0.5 )"},{"path":"https://sanin-lab.github.io/OARscRNA/reference/scatter_score_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create scatter plot of OAR score vs percent missing — scatter_score_missing","text":"data seurat v5 object OAR score meta data, data.frame OAR score results. group.meta data category color data . Default seurat_clusters. seurat_v5 boolean indicate supplied data Seurat object, default TRUE suffix string previously appended output variables. Default empty. pt.size numerical value size points passed size argument geom_point. Default 0.5.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/scatter_score_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create scatter plot of OAR score vs percent missing — scatter_score_missing","text":"Scatter plot OAR score vs percent missing, colored grouping choice.","code":""},{"path":"https://sanin-lab.github.io/OARscRNA/reference/scatter_score_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create scatter plot of OAR score vs percent missing — scatter_score_missing","text":"","code":"if (FALSE) { # \\dontrun{ ##Starting from a Seurat object output <- scatter_score_missing(pmbcs_oar)  ##Starting from a oar results data.frame output <- scatter_score_missing(oar, seurat_v5 = F) } # }"}]

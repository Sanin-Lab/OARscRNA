i <- i %>% as.matrix()
# store column names
cells = colnames(i)
colnames(i) = NULL
# data must be in .data.frame()
if (all(complete.cases(i))) {
stop("No missing data exists\n")
}
# Run test
output[[n]] <- oarbase(data = i) %>%
dplyr::mutate(Fold = paste0("fold_",n),
barcodes = cells)
n=n+1
}
}
parallel.loop = T
if(parallel.loop){
#register cluster
my.cluster <- parallel::makeCluster(
cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = my.cluster) #register it to be used by %dopar%
#Run the loop in parallel
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- f.data %>% as.matrix()
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
parallel::stopCluster(cl = my.cluster)
}else{
output <- list()
n = 1
for(i in fold.data){
# Replace 0 with NA
i[i == 0] <- NA
# Convert to a dense matrix
i <- i %>% as.matrix()
# store column names
cells = colnames(i)
colnames(i) = NULL
# data must be in .data.frame()
if (all(complete.cases(i))) {
stop("No missing data exists\n")
}
# Run test
output[[n]] <- oarbase(data = i) %>%
dplyr::mutate(Fold = paste0("fold_",n),
barcodes = cells)
n=n+1
}
}
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR"))
warnings()
check_out <- oar_fold(pDCs, parallel.loop = F)
load_all()
check_out <- oar_fold(pDCs, parallel.loop = F)
check_out <- oar_fold(pDCs, parallel.loop = T)
?foreach
check_out <- oar_fold(pDCs, parallel.loop = T, seurat_v5 = T)
fold.data
names(fold.data)
f.data[f.data == 0] <- NA
my.cluster
cores = 1
my.cluster <- parallel::makeCluster(
cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = my.cluster) #register it to be used by %dopar%
foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- f.data %>% as.matrix()
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
output <- list()
n = 1
for(i in fold.data){
# Replace 0 with NA
i[i == 0] <- NA
# Convert to a dense matrix
i <- i %>% as.matrix()
# store column names
cells = colnames(i)
colnames(i) = NULL
# data must be in .data.frame()
if (all(complete.cases(i))) {
stop("No missing data exists\n")
}
# Run test
output[[n]] <- oarbase(data = i) %>%
dplyr::mutate(Fold = paste0("fold_",n),
barcodes = cells)
n=n+1
}
f.data = fold.data$iteration_1_fold_1
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- f.data %>% as.matrix()
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
oarbase
oarbase(data = f.data)
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
w
summary(fold.data)
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = T,
.packages = c("OAR")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- f.data %>% as.matrix()
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR","dplyr")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- f.data %>% as.matrix()
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
document()
load_all()
output <- oar_fold(pDCs, cores = 1)
View(output)
degs <- oardeg(output)
document()
load_all()
document()
document()
load_all()
pDCs <- readRDS("~/OneDrive - Johns Hopkins/MissingData/Paper/data/pDCs.rds")
out <- oar_fold(pDCs)
document()
load_all
load_all()
out <- oar_fold(pDCs)
check()
document()
load_all()
out <- oar_fold(pDCs)
load_all()
out <- oar_fold(pDCs)
out <- oar_fold(pDCs, parallel.loop = F)
document()
load_all()
out <- oar_fold(pDCs)
tr <- (1/100)
data <- oarpreprocessdata(pDCs, tr=tr)
fold.data = list()
for(j in 1:iterations){
a = cell.names
for(i in 1:folds){
if(length(a) == 0) break
s <- paste0("iteration_",j,"_","fold_",i)
if(length(a) <= max.cells){max.cells = length(a)}
cells = sample(a,max.cells)
a = a[!a %chin% cells]
fold.data[[s]] = data[,colnames(data) %chin% cells]
}
}
iterations = 10
fold.data = list()
for(j in 1:iterations){
a = cell.names
for(i in 1:folds){
if(length(a) == 0) break
s <- paste0("iteration_",j,"_","fold_",i)
if(length(a) <= max.cells){max.cells = length(a)}
cells = sample(a,max.cells)
a = a[!a %chin% cells]
fold.data[[s]] = data[,colnames(data) %chin% cells]
}
}
cell.names = colnames(data)
max.cells = ceiling(data@Dim[[1]]/gene.ratio)
gene.ratio <- 20
max.cells = ceiling(data@Dim[[1]]/gene.ratio)
folds <- oaridentifyfolds(data, gene.ratio, max.cells)
print(paste0("Number of folds: ",folds))
fold.data = list()
for(j in 1:iterations){
a = cell.names
for(i in 1:folds){
if(length(a) == 0) break
s <- paste0("iteration_",j,"_","fold_",i)
if(length(a) <= max.cells){max.cells = length(a)}
cells = sample(a,max.cells)
a = a[!a %chin% cells]
fold.data[[s]] = data[,colnames(data) %chin% cells]
}
}
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR", "dplyr")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- as.matrix(f.data)
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- OARbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR", "dplyr")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- as.matrix(f.data)
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
out <- oar_fold(pDCs)
warnings()
#Generate list of cell vectors for parallel or sequential processing
fold.data = list()
for(j in 1:iterations){
a = cell.names
for(i in 1:folds){
if(length(a) == 0) break
s <- paste0("iteration_",j,"_","fold_",i)
if(length(a) <= max.cells){max.cells = length(a)}
cells = sample(a,max.cells)
a = a[!a %chin% cells]
fold.data[[s]] = data[,colnames(data) %chin% cells]
}
}
print("Identifying missing patterns and scoring across folds...")
#parallel or sequential processing
if(parallel.loop){
#register cluster
my.cluster <- parallel::makeCluster(
cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = my.cluster) #register it to be used by %dopar%
#Run the loop in parallel
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR", "dplyr")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- as.matrix(f.data)
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
parallel::stopCluster(cl = my.cluster)
}
fold.data = list()
for(j in 1:iterations){
a = cell.names
for(i in 1:folds){
if(length(a) == 0) break
s <- paste0("iteration_",j,"_","fold_",i)
if(length(a) <= max.cells){max.cells = length(a)}
cells = sample(a,max.cells)
a = a[!a %chin% cells]
fold.data[[s]] = data[,colnames(data) %chin% cells]
}
}
print("Identifying missing patterns and scoring across folds...")
#parallel or sequential processing
if(parallel.loop){
#register cluster
my.cluster <- parallel::makeCluster(
cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = my.cluster) #register it to be used by %dopar%
#Run the loop in parallel
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR", "dplyr")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- as.matrix(f.data)
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
parallel::stopCluster(cl = my.cluster)
}
parallel.loop <- T
fold.data = list()
for(j in 1:iterations){
a = cell.names
for(i in 1:folds){
if(length(a) == 0) break
s <- paste0("iteration_",j,"_","fold_",i)
if(length(a) <= max.cells){max.cells = length(a)}
cells = sample(a,max.cells)
a = a[!a %chin% cells]
fold.data[[s]] = data[,colnames(data) %chin% cells]
}
}
print("Identifying missing patterns and scoring across folds...")
#parallel or sequential processing
if(parallel.loop){
#register cluster
my.cluster <- parallel::makeCluster(
cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = my.cluster) #register it to be used by %dopar%
#Run the loop in parallel
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR", "dplyr")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- as.matrix(f.data)
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
parallel::stopCluster(cl = my.cluster)
}
cores = 1
fold.data = list()
for(j in 1:iterations){
a = cell.names
for(i in 1:folds){
if(length(a) == 0) break
s <- paste0("iteration_",j,"_","fold_",i)
if(length(a) <= max.cells){max.cells = length(a)}
cells = sample(a,max.cells)
a = a[!a %chin% cells]
fold.data[[s]] = data[,colnames(data) %chin% cells]
}
}
print("Identifying missing patterns and scoring across folds...")
#parallel or sequential processing
if(parallel.loop){
#register cluster
my.cluster <- parallel::makeCluster(
cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = my.cluster) #register it to be used by %dopar%
#Run the loop in parallel
output <- foreach::foreach(
f.data = fold.data,
folds = names(fold.data),
.verbose = F,
.packages = c("OAR", "dplyr")) %dopar% {
# Replace 0 with NA
f.data[f.data == 0] <- NA
# Convert to a dense matrix
f.data <- as.matrix(f.data)
# store column names
cells = colnames(f.data)
colnames(f.data) = NULL
# data must be in .data.frame()
if (all(complete.cases(f.data))) {
stop("No missing data exists\n")
}
# Run test
w <- oarbase(data = f.data) %>%
dplyr::mutate(Fold = folds,
barcodes = cells)
return(w)
}
parallel::stopCluster(cl = my.cluster)
}
outs <- oar_fold(pDCs, cores = 1)
outs <- oar_fold(pDCs, cores = 1)
use_r("dummy_oar")
document()
load_all
load_all()
load_all()
warnings()
out_test <- dummy_oar(pDCs, fold.data = fold.data)
?foreach
usethis::use_import_from("foreach", "%dopar%")
load_all()
out_test <- dummy_oar(pDCs)
